!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=19)}([function(t,e){t.exports=function(t){return t&&"Widget"===t.type}},function(t,e){t.exports="2"},function(t,e,r){var n=r(1);t.exports=function(t){return t&&"VirtualNode"===t.type&&t.version===n}},function(t,e,r){var n=r(20),o=r(23),i=r(29),u=r(8),a=r(16),c=r(17);t.exports={diff:n,patch:o,h:i,create:u,VNode:a,VText:c}},function(t,e,r){var n=r(1);t.exports=function(t){return t&&"VirtualText"===t.type&&t.version===n}},function(t,e){t.exports=function(t){return t&&"Thunk"===t.type}},function(t,e){t.exports=function(t){return t&&("function"==typeof t.hook&&!t.hasOwnProperty("hook")||"function"==typeof t.unhook&&!t.hasOwnProperty("unhook"))}},function(t,e){var r=Array.isArray,n=Object.prototype.toString;t.exports=r||function(t){return"[object Array]"===n.call(t)}},function(t,e,r){var n=r(14);t.exports=n},function(t,e,r){var n=r(1);function o(t,e,r){this.type=Number(t),this.vNode=e,this.patch=r}o.NONE=0,o.VTEXT=1,o.VNODE=2,o.WIDGET=3,o.PROPS=4,o.ORDER=5,o.INSERT=6,o.REMOVE=7,o.THUNK=8,t.exports=o,o.prototype.version=n,o.prototype.type="VirtualPatch"},function(t,e,r){var n=r(2),o=r(4),i=r(0),u=r(5);function a(t,e){var r=t.vnode;if(r||(r=t.vnode=t.render(e)),!(n(r)||o(r)||i(r)))throw new Error("thunk did not return a valid node");return r}t.exports=function(t,e){var r=t,n=e;u(e)&&(n=a(e,t));u(t)&&(r=a(t,null));return{a:r,b:n}}},function(t,e,r){"use strict";t.exports=function(t){return"object"==typeof t&&null!==t}},function(t,e,r){(function(e){var n,o=void 0!==e?e:"undefined"!=typeof window?window:{},i=r(25);"undefined"!=typeof document?n=document:(n=o["__GLOBAL_DOCUMENT_CACHE@4"])||(n=o["__GLOBAL_DOCUMENT_CACHE@4"]=i),t.exports=n}).call(this,r(13))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){var n=r(12),o=r(15),i=r(2),u=r(4),a=r(0),c=r(10);t.exports=function t(e,r){var s=r&&r.document||n,f=r?r.warn:null;if(e=c(e).a,a(e))return e.init();if(u(e))return s.createTextNode(e.text);if(!i(e))return f&&f("Item is not a valid virtual dom node",e),null;var l=null===e.namespace?s.createElement(e.tagName):s.createElementNS(e.namespace,e.tagName),p=e.properties;o(l,p);for(var d=e.children,h=0;h<d.length;h++){var v=t(d[h],r);v&&l.appendChild(v)}return l}},function(t,e,r){var n=r(11),o=r(6);function i(t,e,r,n){if(n){var i=n[e];if(o(i))i.unhook&&i.unhook(t,e,r);else if("attributes"===e)for(var u in i)t.removeAttribute(u);else if("style"===e)for(var a in i)t.style[a]="";else t[e]="string"==typeof i?"":null}}function u(t,e,r,o,i){var u=r?r[o]:void 0;if("attributes"!==o)if(u&&n(u)&&a(u)!==a(i))t[o]=i;else{n(t[o])||(t[o]={});var c="style"===o?"":void 0;for(var s in i){var f=i[s];t[o][s]=void 0===f?c:f}}else for(var l in i){var p=i[l];void 0===p?t.removeAttribute(l):t.setAttribute(l,p)}}function a(t){return Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__?t.__proto__:t.constructor?t.constructor.prototype:void 0}t.exports=function(t,e,r){for(var a in e){var c=e[a];void 0===c?i(t,a,c,r):o(c)?(i(t,a,c,r),c.hook&&c.hook(t,a,r?r[a]:void 0)):n(c)?u(t,e,r,a,c):t[a]=c}}},function(t,e,r){var n=r(1),o=r(2),i=r(0),u=r(5),a=r(6);t.exports=f;var c={},s=[];function f(t,e,r,n,f){this.tagName=t,this.properties=e||c,this.children=r||s,this.key=null!=n?String(n):void 0,this.namespace="string"==typeof f?f:null;var l,p=r&&r.length||0,d=0,h=!1,v=!1,y=!1;for(var g in e)if(e.hasOwnProperty(g)){var m=e[g];a(m)&&m.unhook&&(l||(l={}),l[g]=m)}for(var b=0;b<p;b++){var w=r[b];o(w)?(d+=w.count||0,!h&&w.hasWidgets&&(h=!0),!v&&w.hasThunks&&(v=!0),y||!w.hooks&&!w.descendantHooks||(y=!0)):!h&&i(w)?"function"==typeof w.destroy&&(h=!0):!v&&u(w)&&(v=!0)}this.count=p+d,this.hasWidgets=h,this.hasThunks=v,this.hooks=l,this.descendantHooks=y}f.prototype.version=n,f.prototype.type="VirtualNode"},function(t,e,r){var n=r(1);function o(t){this.text=String(t)}t.exports=o,o.prototype.version=n,o.prototype.type="VirtualText"},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(t,e){return t[0]===e},o=function(t){return function(t){return"string"==typeof t&&t.length>0}(t)&&(n(t,".")||n(t,"#"))},i=["a","abbr","acronym","address","applet","area","article","aside","audio","b","base","basefont","bdi","bdo","bgsound","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","command","content","data","datalist","dd","del","details","dfn","dialog","dir","div","dl","dt","element","em","embed","fieldset","figcaption","figure","font","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","image","img","input","ins","isindex","kbd","keygen","label","legend","li","link","listing","main","map","mark","marquee","math","menu","menuitem","meta","meter","multicol","nav","nextid","nobr","noembed","noframes","noscript","object","ol","optgroup","option","output","p","param","picture","plaintext","pre","progress","q","rb","rbc","rp","rt","rtc","ruby","s","samp","script","section","select","shadow","slot","small","source","spacer","span","strike","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","tt","u","ul","var","video","wbr","xmp"];e.default=function(t){var e=function(t){return function(e){return function(r){for(var n=arguments.length,i=Array(n>1?n-1:0),u=1;u<n;u++)i[u-1]=arguments[u];return o(r)?t.apply(void 0,[e+r].concat(i)):void 0===r?t(e):t.apply(void 0,[e,r].concat(i))}}}(t),r={TAG_NAMES:i,isSelector:o,createTag:e};return i.forEach((function(t){r[t]=e(t)})),r},t.exports=e.default},function(t,e,r){t.exports=r(38)},function(t,e,r){var n=r(21);t.exports=n},function(t,e,r){var n=r(7),o=r(9),i=r(2),u=r(4),a=r(0),c=r(5),s=r(10),f=r(22);function l(t,e){var r={a:t};return p(t,e,r,0),r}function p(t,e,r,n){if(t!==e){var s=r[n],l=!1;if(c(t)||c(e))h(t,e,r,n);else if(null==e)a(t)||(d(t,r,n),s=r[n]),s=g(s,new o(o.REMOVE,t,e));else if(i(e))if(i(t))if(t.tagName===e.tagName&&t.namespace===e.namespace&&t.key===e.key){var m=f(t.properties,e.properties);m&&(s=g(s,new o(o.PROPS,t,m))),s=function(t,e,r,n,u){for(var a=t.children,c=function(t,e){var r=y(e),n=r.keys,o=r.free;if(o.length===e.length)return{children:e,moves:null};var i=y(t),u=i.keys;if(i.free.length===t.length)return{children:e,moves:null};for(var a=[],c=0,s=o.length,f=0,l=0;l<t.length;l++){var p,d=t[l];d.key?n.hasOwnProperty(d.key)?(p=n[d.key],a.push(e[p])):(p=l-f++,a.push(null)):c<s?(p=o[c++],a.push(e[p])):(p=l-f++,a.push(null))}for(var h=c>=o.length?e.length:o[c],g=0;g<e.length;g++){var m=e[g];m.key?u.hasOwnProperty(m.key)||a.push(m):g>=h&&a.push(m)}for(var b,w=a.slice(),O=0,x=[],k=[],E=0;E<e.length;){var N=e[E];for(b=w[O];null===b&&w.length;)x.push(v(w,O,null)),b=w[O];b&&b.key===N.key?(O++,E++):N.key?(b&&b.key&&n[b.key]!==E+1?(x.push(v(w,O,b.key)),(b=w[O])&&b.key===N.key?O++:k.push({key:N.key,to:E})):k.push({key:N.key,to:E}),E++):b&&b.key&&x.push(v(w,O,b.key))}for(;O<w.length;)b=w[O],x.push(v(w,O,b&&b.key));if(x.length===f&&!k.length)return{children:a,moves:null};return{children:a,moves:{removes:x,inserts:k}}}(a,e.children),s=c.children,f=a.length,l=s.length,d=f>l?f:l,h=0;h<d;h++){var m=a[h],b=s[h];u+=1,m?p(m,b,r,u):b&&(n=g(n,new o(o.INSERT,null,b))),i(m)&&m.count&&(u+=m.count)}c.moves&&(n=g(n,new o(o.ORDER,t,c.moves)));return n}(t,e,r,s,n)}else s=g(s,new o(o.VNODE,t,e)),l=!0;else s=g(s,new o(o.VNODE,t,e)),l=!0;else u(e)?u(t)?t.text!==e.text&&(s=g(s,new o(o.VTEXT,t,e))):(s=g(s,new o(o.VTEXT,t,e)),l=!0):a(e)&&(a(t)||(l=!0),s=g(s,new o(o.WIDGET,t,e)));s&&(r[n]=s),l&&d(t,r,n)}}function d(t,e,r){!function t(e,r,n){if(i(e)){if(e.hooks&&(r[n]=g(r[n],new o(o.PROPS,e,function(t){var e={};for(var r in t)e[r]=void 0;return e}(e.hooks)))),e.descendantHooks||e.hasThunks)for(var u=e.children,a=u.length,s=0;s<a;s++){var f=u[s];t(f,r,n+=1),i(f)&&f.count&&(n+=f.count)}}else c(e)&&h(e,null,r,n)}(t,e,r),function t(e,r,n){if(a(e))"function"==typeof e.destroy&&(r[n]=g(r[n],new o(o.REMOVE,e,null)));else if(i(e)&&(e.hasWidgets||e.hasThunks))for(var u=e.children,s=u.length,f=0;f<s;f++){var l=u[f];t(l,r,n+=1),i(l)&&l.count&&(n+=l.count)}else c(e)&&h(e,null,r,n)}(t,e,r)}function h(t,e,r,n){var i=s(t,e),u=l(i.a,i.b);(function(t){for(var e in t)if("a"!==e)return!0;return!1})(u)&&(r[n]=new o(o.THUNK,null,u))}function v(t,e,r){return t.splice(e,1),{from:e,key:r}}function y(t){for(var e={},r=[],n=t.length,o=0;o<n;o++){var i=t[o];i.key?e[i.key]=o:r.push(o)}return{keys:e,free:r}}function g(t,e){return t?(n(t)?t.push(e):t=[t,e],t):e}t.exports=l},function(t,e,r){var n=r(11),o=r(6);function i(t){return Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__?t.__proto__:t.constructor?t.constructor.prototype:void 0}t.exports=function t(e,r){var u;for(var a in e){a in r||((u=u||{})[a]=void 0);var c=e[a],s=r[a];if(c!==s)if(n(c)&&n(s))if(i(s)!==i(c))(u=u||{})[a]=s;else if(o(s))(u=u||{})[a]=s;else{var f=t(c,s);f&&((u=u||{})[a]=f)}else(u=u||{})[a]=s}for(var l in r)l in e||((u=u||{})[l]=r[l]);return u}},function(t,e,r){var n=r(24);t.exports=n},function(t,e,r){var n=r(12),o=r(7),i=r(14),u=r(26),a=r(27);function c(t,e,r){var o=function(t){var e=[];for(var r in t)"a"!==r&&e.push(Number(r));return e}(e);if(0===o.length)return t;var i=u(t,e.a,o),a=t.ownerDocument;r.document||a===n||(r.document=a);for(var c=0;c<o.length;c++){var f=o[c];t=s(t,i[f],e[f],r)}return t}function s(t,e,r,n){if(!e)return t;var i;if(o(r))for(var u=0;u<r.length;u++)i=a(r[u],e,n),e===t&&(t=i);else i=a(r,e,n),e===t&&(t=i);return t}t.exports=function t(e,r,n){return(n=n||{}).patch=n.patch&&n.patch!==t?n.patch:c,n.render=n.render||i,n.patch(e,r,n)}},function(t,e){},function(t,e){var r={};function n(t,e,r){if(0===t.length)return!1;for(var n,o,i=0,u=t.length-1;i<=u;){if(o=t[n=(u+i)/2>>0],i===u)return o>=e&&o<=r;if(o<e)i=n+1;else{if(!(o>r))return!0;u=n-1}}return!1}function o(t,e){return t>e?1:-1}t.exports=function(t,e,i,u){return i&&0!==i.length?(i.sort(o),function t(e,o,i,u,a){if(u=u||{},e){n(i,a,a)&&(u[a]=e);var c=o.children;if(c)for(var s=e.childNodes,f=0;f<o.children.length;f++){a+=1;var l=c[f]||r,p=a+(l.count||0);n(i,a,p)&&t(s[f],l,i,u,a),a=p}}return u}(t,e,i,u,0)):{}}},function(t,e,r){var n=r(15),o=r(0),i=r(9),u=r(28);function a(t,e){"function"==typeof e.destroy&&o(e)&&e.destroy(t)}t.exports=function(t,e,r){var o=t.type,c=t.vNode,s=t.patch;switch(o){case i.REMOVE:return function(t,e){var r=t.parentNode;r&&r.removeChild(t);return a(t,e),null}(e,c);case i.INSERT:return function(t,e,r){var n=r.render(e,r);t&&t.appendChild(n);return t}(e,s,r);case i.VTEXT:return function(t,e,r,n){var o;if(3===t.nodeType)t.replaceData(0,t.length,r.text),o=t;else{var i=t.parentNode;o=n.render(r,n),i&&o!==t&&i.replaceChild(o,t)}return o}(e,0,s,r);case i.WIDGET:return function(t,e,r,n){var o,i=u(e,r);o=i?r.update(e,t)||t:n.render(r,n);var c=t.parentNode;c&&o!==t&&c.replaceChild(o,t);i||a(t,e);return o}(e,c,s,r);case i.VNODE:return function(t,e,r,n){var o=t.parentNode,i=n.render(r,n);o&&i!==t&&o.replaceChild(i,t);return i}(e,0,s,r);case i.ORDER:return function(t,e){for(var r,n,o,i=t.childNodes,u={},a=0;a<e.removes.length;a++)n=e.removes[a],r=i[n.from],n.key&&(u[n.key]=r),t.removeChild(r);for(var c=i.length,s=0;s<e.inserts.length;s++)o=e.inserts[s],r=u[o.key],t.insertBefore(r,o.to>=c++?null:i[o.to])}(e,s),e;case i.PROPS:return n(e,s,c.properties),e;case i.THUNK:return function(t,e){t&&e&&t!==e&&t.parentNode&&t.parentNode.replaceChild(e,t);return e}(e,r.patch(e,s,r));default:return e}}},function(t,e,r){var n=r(0);t.exports=function(t,e){if(n(t)&&n(e))return"name"in t&&"name"in e?t.id===e.id:t.init===e.init;return!1}},function(t,e,r){var n=r(30);t.exports=n},function(t,e,r){"use strict";var n=r(7),o=r(16),i=r(17),u=r(2),a=r(4),c=r(0),s=r(6),f=r(5),l=r(31),p=r(33),d=r(34);function h(t){return u(t)||a(t)||c(t)||f(t)}function v(t){try{return JSON.stringify(t,null,"    ")}catch(e){return String(t)}}t.exports=function(t,e,r){var u,a,c,f,y=[];!r&&(g=e,"string"==typeof g||n(g)||h(g))&&(r=e,a={});var g;u=l(t,a=a||e||{}),a.hasOwnProperty("key")&&(c=a.key,a.key=void 0);a.hasOwnProperty("namespace")&&(f=a.namespace,a.namespace=void 0);"INPUT"!==u||f||!a.hasOwnProperty("value")||void 0===a.value||s(a.value)||(a.value=p(a.value));(function(t){for(var e in t)if(t.hasOwnProperty(e)){var r=t[e];if(s(r))continue;"ev-"===e.substr(0,3)&&(t[e]=d(r))}})(a),null!=r&&function t(e,r,o,u){if("string"==typeof e)r.push(new i(e));else if("number"==typeof e)r.push(new i(String(e)));else if(h(e))r.push(e);else{if(!n(e)){if(null==e)return;throw c={foreignObject:e,parentVnode:{tagName:o,properties:u}},(s=new Error).type="virtual-hyperscript.unexpected.virtual-element",s.message="Unexpected virtual child passed to h().\nExpected a VNode / Vthunk / VWidget / string but:\ngot:\n"+v(c.foreignObject)+".\nThe parent vnode is:\n"+v(c.parentVnode),s.foreignObject=c.foreignObject,s.parentVnode=c.parentVnode,s}for(var a=0;a<e.length;a++)t(e[a],r,o,u)}var c,s}(r,y,u,a);return new o(u,a,y,c,f)}},function(t,e,r){"use strict";var n=r(32),o=/([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/,i=/^\.|#/;t.exports=function(t,e){if(!t)return"DIV";var r,u,a,c,s=!e.hasOwnProperty("id"),f=n(t,o),l=null;i.test(f[1])&&(l="DIV");for(c=0;c<f.length;c++)(u=f[c])&&(a=u.charAt(0),l?"."===a?(r=r||[]).push(u.substring(1,u.length)):"#"===a&&s&&(e.id=u.substring(1,u.length)):l=u);r&&(e.className&&r.push(e.className),e.className=r.join(" "));return e.namespace?l:l.toUpperCase()}},function(t,e){var r,n,o;
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */
t.exports=(n=String.prototype.split,o=/()??/.exec("")[1]===r,function(t,e,i){if("[object RegExp]"!==Object.prototype.toString.call(e))return n.call(t,e,i);var u,a,c,s,f=[],l=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.extended?"x":"")+(e.sticky?"y":""),p=0;for(e=new RegExp(e.source,l+"g"),t+="",o||(u=new RegExp("^"+e.source+"$(?!\\s)",l)),i=i===r?-1>>>0:i>>>0;(a=e.exec(t))&&!((c=a.index+a[0].length)>p&&(f.push(t.slice(p,a.index)),!o&&a.length>1&&a[0].replace(u,(function(){for(var t=1;t<arguments.length-2;t++)arguments[t]===r&&(a[t]=r)})),a.length>1&&a.index<t.length&&Array.prototype.push.apply(f,a.slice(1)),s=a[0].length,p=c,f.length>=i));)e.lastIndex===a.index&&e.lastIndex++;return p===t.length?!s&&e.test("")||f.push(""):f.push(t.slice(p)),f.length>i?f.slice(0,i):f})},function(t,e,r){"use strict";function n(t){if(!(this instanceof n))return new n(t);this.value=t}t.exports=n,n.prototype.hook=function(t,e){t[e]!==this.value&&(t[e]=this.value)}},function(t,e,r){"use strict";var n=r(35);function o(t){if(!(this instanceof o))return new o(t);this.value=t}t.exports=o,o.prototype.hook=function(t,e){n(t)[e.substr(3)]=this.value},o.prototype.unhook=function(t,e){n(t)[e.substr(3)]=void 0}},function(t,e,r){"use strict";r(36)("ev-store","7");t.exports=function(t){var e=t["__EV_STORE_KEY@7"];e||(e=t["__EV_STORE_KEY@7"]={});return e}},function(t,e,r){"use strict";var n=r(37);t.exports=function(t,e,r){var o="__INDIVIDUAL_ONE_VERSION_"+t,i=n(o+"_ENFORCE_SINGLETON",e);if(i!==e)throw new Error("Can only have one copy of "+t+".\nYou already have version "+i+" installed.\nThis means you cannot install version "+e);return n(o,r)}},function(t,e,r){"use strict";(function(e){var r="undefined"!=typeof window?window:void 0!==e?e:{};t.exports=function(t,e){if(t in r)return r[t];return r[t]=e,e}}).call(this,r(13))},function(t,e,r){"use strict";r.r(e);var n={description:"Breakfast",calories:480,showForm:!1,nextId:0,editId:null,meals:[]};function o(t,e){switch(t){case 0:return function(){return e.apply(this,arguments)};case 1:return function(t){return e.apply(this,arguments)};case 2:return function(t,r){return e.apply(this,arguments)};case 3:return function(t,r,n){return e.apply(this,arguments)};case 4:return function(t,r,n,o){return e.apply(this,arguments)};case 5:return function(t,r,n,o,i){return e.apply(this,arguments)};case 6:return function(t,r,n,o,i,u){return e.apply(this,arguments)};case 7:return function(t,r,n,o,i,u,a){return e.apply(this,arguments)};case 8:return function(t,r,n,o,i,u,a,c){return e.apply(this,arguments)};case 9:return function(t,r,n,o,i,u,a,c,s){return e.apply(this,arguments)};case 10:return function(t,r,n,o,i,u,a,c,s,f){return e.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}function i(t,e){return function(){return e.call(this,t.apply(this,arguments))}}function u(t){return null!=t&&"object"==typeof t&&!0===t["@@functional/placeholder"]}function a(t){return function e(r){return 0===arguments.length||u(r)?e:t.apply(this,arguments)}}function c(t){return function e(r,n){switch(arguments.length){case 0:return e;case 1:return u(r)?e:a((function(e){return t(r,e)}));default:return u(r)&&u(n)?e:u(r)?a((function(e){return t(e,n)})):u(n)?a((function(e){return t(r,e)})):t(r,n)}}}function s(t){return function e(r,n,o){switch(arguments.length){case 0:return e;case 1:return u(r)?e:c((function(e,n){return t(r,e,n)}));case 2:return u(r)&&u(n)?e:u(r)?c((function(e,r){return t(e,n,r)})):u(n)?c((function(e,n){return t(r,e,n)})):a((function(e){return t(r,n,e)}));default:return u(r)&&u(n)&&u(o)?e:u(r)&&u(n)?c((function(e,r){return t(e,r,o)})):u(r)&&u(o)?c((function(e,r){return t(e,n,r)})):u(n)&&u(o)?c((function(e,n){return t(r,e,n)})):u(r)?a((function(e){return t(e,n,o)})):u(n)?a((function(e){return t(r,e,o)})):u(o)?a((function(e){return t(r,n,e)})):t(r,n,o)}}}var f=Array.isArray||function(t){return null!=t&&t.length>=0&&"[object Array]"===Object.prototype.toString.call(t)};var l=a((function(t){return!!f(t)||!!t&&("object"==typeof t&&(!function(t){return"[object String]"===Object.prototype.toString.call(t)}(t)&&(1===t.nodeType?!!t.length:0===t.length||t.length>0&&(t.hasOwnProperty(0)&&t.hasOwnProperty(t.length-1)))))})),p=function(){function t(t){this.f=t}return t.prototype["@@transducer/init"]=function(){throw new Error("init not implemented on XWrap")},t.prototype["@@transducer/result"]=function(t){return t},t.prototype["@@transducer/step"]=function(t,e){return this.f(t,e)},t}();var d=c((function(t,e){return o(t.length,(function(){return t.apply(e,arguments)}))}));function h(t,e,r){for(var n=r.next();!n.done;){if((e=t["@@transducer/step"](e,n.value))&&e["@@transducer/reduced"]){e=e["@@transducer/value"];break}n=r.next()}return t["@@transducer/result"](e)}function v(t,e,r,n){return t["@@transducer/result"](r[n](d(t["@@transducer/step"],t),e))}var y="undefined"!=typeof Symbol?Symbol.iterator:"@@iterator";function g(t,e,r){if("function"==typeof t&&(t=function(t){return new p(t)}(t)),l(r))return function(t,e,r){for(var n=0,o=r.length;n<o;){if((e=t["@@transducer/step"](e,r[n]))&&e["@@transducer/reduced"]){e=e["@@transducer/value"];break}n+=1}return t["@@transducer/result"](e)}(t,e,r);if("function"==typeof r["fantasy-land/reduce"])return v(t,e,r,"fantasy-land/reduce");if(null!=r[y])return h(t,e,r[y]());if("function"==typeof r.next)return h(t,e,r);if("function"==typeof r.reduce)return v(t,e,r,"reduce");throw new TypeError("reduce: list must be array or iterable")}var m=s(g);function b(t,e){return function(){var r=arguments.length;if(0===r)return e();var n=arguments[r-1];return f(n)||"function"!=typeof n[t]?e.apply(this,arguments):n[t].apply(n,Array.prototype.slice.call(arguments,0,r-1))}}var w=a(b("tail",s(b("slice",(function(t,e,r){return Array.prototype.slice.call(r,t,e)})))(1,1/0)));var O=c((function(t,e){return null==e||e!=e?t:e}));function x(t){return null!=t&&"function"==typeof t["@@transducer/step"]}function k(t,e,r){return function(){if(0===arguments.length)return r();var n=Array.prototype.slice.call(arguments,0),o=n.pop();if(!f(o)){for(var i=0;i<t.length;){if("function"==typeof o[t[i]])return o[t[i]].apply(o,n);i+=1}if(x(o)){var u=e.apply(null,n);return u(o)}}return r.apply(this,arguments)}}var E=function(){return this.xf["@@transducer/init"]()},N=function(t){return this.xf["@@transducer/result"](t)},j=function(){function t(t,e){this.xf=e,this.f=t}return t.prototype["@@transducer/init"]=E,t.prototype["@@transducer/result"]=N,t.prototype["@@transducer/step"]=function(t,e){return this.f(e)?this.xf["@@transducer/step"](t,e):t},t}(),_=c((function(t,e){return new j(t,e)}));function S(t,e){return Object.prototype.hasOwnProperty.call(e,t)}var P=Object.prototype.toString,T=function(){return"[object Arguments]"===P.call(arguments)?function(t){return"[object Arguments]"===P.call(t)}:function(t){return S("callee",t)}}(),A=!{toString:null}.propertyIsEnumerable("toString"),I=["constructor","valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],V=function(){return arguments.propertyIsEnumerable("length")}(),C=function(t,e){for(var r=0;r<t.length;){if(t[r]===e)return!0;r+=1}return!1},R="function"!=typeof Object.keys||V?a((function(t){if(Object(t)!==t)return[];var e,r,n=[],o=V&&T(t);for(e in t)!S(e,t)||o&&"length"===e||(n[n.length]=e);if(A)for(r=I.length-1;r>=0;)S(e=I[r],t)&&!C(n,e)&&(n[n.length]=e),r-=1;return n})):a((function(t){return Object(t)!==t?[]:Object.keys(t)})),D=c(k(["filter"],_,(function(t,e){return r=e,"[object Object]"===Object.prototype.toString.call(r)?g((function(r,n){return t(e[n])&&(r[n]=e[n]),r}),{},R(e)):function(t,e){for(var r=0,n=e.length,o=[];r<n;)t(e[r])&&(o[o.length]=e[r]),r+=1;return o}(t,e);var r})));var M=function(){function t(t,e){this.xf=e,this.f=t,this.found=!1}return t.prototype["@@transducer/init"]=E,t.prototype["@@transducer/result"]=function(t){return this.found||(t=this.xf["@@transducer/step"](t,void 0)),this.xf["@@transducer/result"](t)},t.prototype["@@transducer/step"]=function(t,e){var r;return this.f(e)&&(this.found=!0,t=(r=this.xf["@@transducer/step"](t,e))&&r["@@transducer/reduced"]?r:{"@@transducer/value":r,"@@transducer/reduced":!0}),t},t}(),F=c(k(["find"],c((function(t,e){return new M(t,e)})),(function(t,e){for(var r=0,n=e.length;r<n;){if(t(e[r]))return e[r];r+=1}})));var L=function(){function t(t,e){this.xf=e,this.f=t}return t.prototype["@@transducer/init"]=E,t.prototype["@@transducer/result"]=N,t.prototype["@@transducer/step"]=function(t,e){return this.xf["@@transducer/step"](t,this.f(e))},t}(),U=c((function(t,e){return new L(t,e)}));var W=c((function(t,e){return 1===t?a(e):o(t,function t(e,r,n){return function(){for(var i=[],a=0,c=e,s=0;s<r.length||a<arguments.length;){var f;s<r.length&&(!u(r[s])||a>=arguments.length)?f=r[s]:(f=arguments[a],a+=1),i[s]=f,u(f)||(c-=1),s+=1}return c<=0?n.apply(this,i):o(c,t(e,i,n))}}(t,[],e))})),H=c(k(["fantasy-land/map","map"],U,(function(t,e){switch(Object.prototype.toString.call(e)){case"[object Function]":return W(e.length,(function(){return t.call(this,e.apply(this,arguments))}));case"[object Object]":return g((function(r,n){return r[n]=t(e[n]),r}),{},R(e));default:return function(t,e){for(var r=0,n=e.length,o=Array(n);r<n;)o[r]=t(e[r]),r+=1;return o}(t,e)}})));function G(t){return function(t){if(Array.isArray(t))return q(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return q(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return q(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function q(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function B(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function K(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?B(Object(r),!0).forEach((function(e){X(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):B(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function X(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var Y="SHOW_FORM",$="MEAL_INPUT",z="CALORIES_INPUT",J="SAVE_MEAL",Z="DELETE_MEAL",Q="UPDATE_MEAL";function tt(t){return{type:Y,showForm:t}}var et={type:J};var rt=function(t,e){switch(t.type){case Y:var r=t.showForm;return K(K({},e),{},{showForm:r,description:"",calories:""});case $:var n=t.description;return K(K({},e),{},{description:n});case z:var u=function(){if(0===arguments.length)throw new Error("pipe requires at least one argument");return o(arguments[0].length,m(i,arguments[0],w(arguments)))}(parseInt,O(0))(t.calories);return K(K({},e),{},{calories:u});case J:return null!==e.editId?function(t,e){var r=e.description,n=e.calories,o=e.editId,i=H((function(t){return t.id===o?{calories:n,description:r,meal:t}:t}),e.meals);return K(K({},e),{},{description:"",calories:0,editId:null,showForm:!1,meals:i})}(0,e):function(t,e){var r=e.nextId,n=e.description,o=e.calories,i={id:r,description:n,calories:o},u=[].concat(G(e.meals),[i]);return K(K({},e),{},{meals:u,nextId:r+1,description:"",calories:0,showForm:!1})}(0,e);case Z:var a=t.id,c=D((function(t){return t.id!==a}),e.meals);return K(K({},e),{},{meals:c});case Q:var s=t.editId,f=F((function(t){return t.id===s}),e.meals),l=f.description,p=f.calories;return K(K({},e),{},{editId:s,description:l,calories:p,showForm:!0})}return e},nt=r(18),ot=r.n(nt),it=r(3),ut=ot()(it.h),at=(ut.pre,ut.div),ct=ut.h1,st=ut.button,ft=ut.form,lt=ut.label,pt=ut.input,dt=ut.table,ht=ut.tr,vt=ut.td,yt=ut.thead,gt=ut.tbody,mt=ut.i;function bt(t){return at([st({className:"f3 pv2 ph3 bg-blue white bn mr2 dim",type:"submit"},"Save"),st({className:"f3 pv2 ph3 bn bg-light-gray dim",type:"button",onclick:function(){return t(tt(!1))}},"Cancel")])}function wt(t,e,r){return at([lt({className:"db mb1"},t),pt({className:"pa2 input-reset ba w-100 mb2",type:"text",value:e,oninput:r})])}function Ot(t,e){var r=e.description,n=e.calories;return e.showForm?ft({className:"w-100 mv2",onsubmit:function(e){e.preventDefault(),t(et)}},[wt("Meal",r,(function(e){return t(function(t){return{type:$,description:t}}(e.target.value))})),wt("Calories",n||"",(function(e){return t(function(t){return{type:z,calories:t}}(e.target.value))})),bt(t)]):st({className:"f3 pv2 ph3 bg-blue white bn",onclick:function(){return t(tt(!0))}},"Add Meal")}var xt=function(t,e){return t+e.calories},kt=function(t,e){return vt({className:t},e)};function Et(t,e){var r=e.description,n=e.calories,o=e.id;return ht({className:"lh-copy stripe-dark"},[kt("pa3",r),kt("pa3",n),kt("pa3",[mt({className:"ph1 fa fa-trash-o pointer",onclick:function(){return t(function(t){return{type:Z,id:t}}(o))}}),mt({className:"ph1 fa fa-pencil-square-o pointer",onclick:function(){return t({type:Q,editId:o})}})])])}function Nt(t,e){return e.map((function(e){return Et(t,e)}))}var jt=yt({className:"lh-copy"},[ht({className:"bg-mid-gray white"},[kt("pa3","Meal"),kt("pa3","Calories"),kt()])]),_t=function(t){return ht({className:"stripe-dark"},[kt("pa3 b bg-light-yellow","Total"),kt("pa3 bg-light-yellow",t.reduce(xt,0)),kt("pa3 bg-yellow","")])};function St(t,e){var r=e.meals;return r.length?at({className:"overflow-auto"},[dt({className:"w-100 center ba mt3",cellspacing:0},[jt,gt([Nt(t,r),_t(r)])])]):at({className:"mv2 i back-50"},"No meals to display...")}var Pt=function(t,e){return at({className:"mw6 center"},[ct({className:"f2 pv2 bb"},"Calorie Counter"),Ot(t,e),St(t,e)])},Tt=r(8),At=r.n(Tt);(function(t,e,r,n){var o=t,i=r((function t(n){o=e(n,o);var a=r(t,o),c=Object(it.diff)(i,a);u=Object(it.patch)(u,c),i=a}),o),u=At()(i);n.appendChild(u)})(n,rt,Pt,document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,